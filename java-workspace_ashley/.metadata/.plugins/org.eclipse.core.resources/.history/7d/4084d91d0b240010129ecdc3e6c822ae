package pruebas;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

public class TestCliente {

	public static void main(String[] args) {
		
		List<Cliente> listaClientes = new ArrayList <Cliente>();
		Collection<Cliente> coleccionCliente = listaClientes;
		
		Cliente cliente1 = new Cliente ("111","Marta","12/02/2000");

		coleccionCliente.add(cliente1); //añadimos el elemento
		coleccionCliente.remove(cliente1);// lo eliminamos
		
		coleccionCliente.add(new Cliente ("111", "Marta", "12/02/2000"));
		coleccionCliente.add(new Cliente ("115", "Jorge", "16/03/1999"));
		coleccionCliente.add(new Cliente("112", "Carlos", "01/10/2002"));
		
		System.out.println("Tamanio de la coleccion: "+coleccionCliente.size()+"\n");
		System.out.println("¿Esta vacio? = "+coleccionCliente.isEmpty()+"\n");
		
		coleccionCliente.contains (new Cliente ("115", "Jorge", "16/03/1999"));
		
		coleccionCliente.contains(new Cliente ("115"));
		
		System.out.println(coleccionCliente);
		
		
		Collection<Cliente> otrosClientes = new ArrayList<>(); 
		otrosClientes.add(new Cliente ("111", "Marta", "12/02/2000"));//los que ya estaban
		otrosClientes.add(new Cliente ("112", "Carlos", "01/10/2002"));
		
		coleccionCliente.containsAll(otrosClientes); //al tener los dos elementos en común, dara true
		
		otrosClientes.add(new Cliente ("211", "Ana", "07/12/2001"));//uno diferente

		coleccionCliente.containsAll (otrosClientes); // al tener uno diferente saldra false
		
		coleccionCliente.addAll(otrosClientes);
		
		System.out.println(coleccionCliente);
		
		coleccionCliente.remove(new Cliente ("111"));
		
		coleccionCliente.removeAll(otrosClientes);
		
		
		Iterator<Cliente> it = coleccionCliente.iterator();
		
		System.out.println(it.hasNext());
		
		System.out.println(it.next());
		
		while (it.hasNext()) {
			Cliente p = it.next();
			if (p.getFechaNacimiento().compareTo (LocalDate.of (2000, 1, 1)) < 0) {
				it.remove(); /*elimina p, ultimo cliente devuelto por next ()
		¡No usar coleccionClie.remove(p)!*/
			}
		}
		
		for (Cliente c : coleccionCliente) {
			System.out.println(c);
		}
		
		
	}

}
