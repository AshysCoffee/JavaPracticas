package ejercicio_String;

import java.util.*;

public class MyString {
	
	//ATRIBUTOS
	private char[] cadena;
	
	
	//CONSTRUCTOR
	public MyString(String c){
		this.cadena = new char[c.length()]; //debemos iniciar el array del mismo tamaño que el string
		for (int i=0; i<c.length(); i++) {
		this.cadena[i]=c.charAt(i);
		}	
	}
	
	public MyString(char[] c){
		this.cadena = new char [c.length]; //debemos iniciar el array del mismo tamaño que el array
		for (int i=0; i<c.length; i++) {
			this.cadena[i]=c[i];
		}

	}
	
	public MyString(ArrayList<Character> c){
		this.cadena = new char [c.size()]; //debemos iniciar el array del mismo tamaño que el arraylist
		for (int i=0; i<c.size(); i++) {
			this.cadena[i]=c.get(i);
		}
	}
	
	
	//METODOS
	public char[] getCadena(){
		return cadena;
	}
	
	public char myCharAt(int i) throws Exception{
		char caracter=' ';
		
		if (i<=cadena.length && cadena[i]!=' ') { 
			caracter=cadena[i];
			return caracter;
		}
		
		if((i>cadena.length)) {
			throw new Exception("Esta fuera del rango");
		}
		
		return caracter;
	}
	
	public int myCompareTo(MyString cadena2){
		
		char[] cadena_parametro = new char[cadena2.myLength()]; //debemos iniciar el array del mismo tamaño que el string
		
		for (int i=0; i<cadena2.myLength(); i++) {
			try {
				cadena_parametro[i]=cadena2.myCharAt(i);
			} catch (Exception e) {
				e.getMessage();
			}
		}
		

		
		for (int j=0; j<cadena2.myLength(); j++) {

			do {
				if (this.cadena[j] < cadena2.cadena[j]) {
					return this.cadena[j] - cadena2.cadena[j];
					
				}else{

				if (this.cadena[j] > cadena2.cadena[j]) 
					return this.cadena[j] + cadena2.cadena[j];
				
				}
				
		}while ((this.cadena[0] == cadena2.cadena[0]));
		
		}	
				if (this.cadena[0] == cadena2.cadena[0]) {
					return 0;
				}

			
				if (this.cadena[0] > cadena2.cadena[0]) {
					return this.cadena[0] - cadena2.cadena[0];
				}

				if (this.cadena[0] < cadena2.cadena[0]) {
					return this.cadena[0] + cadena2.cadena[0];
				}
				
				
		return 0;
	}
	
	public int myCompareToIgnoreCase(MyString cadena2){
		
		char[] cadena_parametro = new char[cadena2.myLength()]; //debemos iniciar el array del mismo tamaño que el string
		
		for (int i=0; i<cadena2.myLength(); i++) {
			try {
				cadena_parametro[i]=cadena2.myCharAt(i);
			} catch (Exception e) {
				e.getMessage();
			}
		}

		
		int comparador=0;
		
		for (int j=0; j<cadena2.myLength(); j++) {

				
			if (this.cadena[0] > cadena2.cadena[0]) {
				return this.cadena[0] - cadena2.cadena[0];
			}

			if (this.cadena[0] < cadena2.cadena[0]) {
				return this.cadena[0] + cadena2.cadena[0];
			}
			
				if (this.cadena[j] < cadena2.cadena[j]) {
					return this.cadena[j] - cadena2.cadena[j];
				}else{

				if (this.cadena[j] > cadena2.cadena[j]) 
					return this.cadena[j] + cadena2.cadena[j];
				
				}
					
				if (this.cadena[0] == cadena2.cadena[0]) {
					return 0;
				}
				

				if ((this.cadena[0] == cadena2.cadena[0])||(comparador==cadena.length)){
					return 0;
				}
			
		}
		return 0;
	} 
	
	public void myConcat(MyString cadena2){  
	}
	
	public int myIndexOf(int caracter){
		return caracter;
	}
	
	public int myLastIndexOf(int caracter){
		return caracter;
	}
	
	public int myLength(){
		int contador=0;
		
		for (int i=0; i<cadena.length; i++) {
			if (cadena[i]==' '||cadena[i]!=' ') {
				contador++;
			}
		}
		return contador;
	}
	
	public MyString myReplace(char antiguo, char nuevo){
		return null;
	}

	public MyString[] mySplit(char expresion) {
		return null;
	}
	
	public MyString mySubstring(int inicio, int fin) throws Exception{
		return null;
	}
	
	public MyString myToLowerCase(){ //aqu se suma 32 en asccii para mayus y restar 32 para minus
		return null;
	}
	
	public MyString myToLowerCase(char[] cadena){
		return null;
	}
	
	public MyString myToUpperCase(){
		return null;
	}
	
	public MyString myTrim(){
		return null;
	}
	
	public void imprimir(){
	}
	
	public String myToString(){
		return null;
	}
}
